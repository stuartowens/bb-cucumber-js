This folder contains:
- `pages` - the page objects actually used by Writing team
- `loader` - the code that originally made the pages usable.

Note that loader code is essentially just for understanding - this was not the original directory structure, and there may be other pieces missing as well - it's just to be able to see the context of how it was loaded and used.

These page objects do two things that make a direct translation to the e2e PO system not completely transparent.

1. Nested scoping is to:
   - keep the file size of any single page object reasonably small
   - deal with complicated element sets that may repeat any number of times on a page
   - make queries to the page more exact

For example, below excerpted from the `student-summary.page.js`

```
const previousCommentPanel = require('./student-summary.component.previous-comment-panel');

exports.StudentSummaryPage = class extends Page {
  things() {
    return {
      success_flash: {
        desc: `Confirmation message that appears upon successful submission and save`,
        locator: `[class*='MLMessage__message_success__'] span[class*='MLMessage__message__']`
      }
    }
  }

  previous_comment_panel(arg) {
    return previousCommentPanel.generate(arg, {
      locator: `[class^='CompositionFeedback__compositionFeedback__']`});
  }
}

// and then in student-summary.component.previous-comment-panel.js
class PreviousCommentPanel extends Component {
  things() {
    return {
      previous_feedback_item: {
        desc: `container holding information relating to a previous draft comment`,
        locator: `[class^='CompositionFeedback__feedbackItem__']`
      }
    }
  }
}
```

Items in the `things()` function get transformed into element-returning-functions on instantiation.
`previous_comment_panel` is not, but it will be *mounted* at the location given.
So a query to `student_summary_page().previous_feedback_item()` will first find the section of the DOM that matches `[class*='MLMessage__message_success__'] span[class*='MLMessage__message__']`, and then, only from within that chunk, return all elements that match `[class^='CompositionFeedback__feedbackItem__']`.

2. The PO is itself a function, and can take different types of arguments.
   Primarily, this is used to address repeating elemnts, e.g. the instructor-summary.page.js may contain any number (generally 2 - 5, but potentially any #) of 'draft cards'.  Each of these cards contains the same subelements, and is essentially identical.
   So rather than make a separate object for `draft_1`, `draft_2`, `draft_3` and so on, they're accessible as `draft(1)`, `draft(2)`, and `draft(3)`.  If each draft has, say, a list of criteria, you could access the 3rd one in the 2nd draft with `instructor_summary_page.draft(2).criteria(3)`).

While I don't think it's actually an issue with the POs, they've been added to since I changed teams - a potential problem with translating these elements to the current e2e framework is selector type mismatch.
If you have the page component locator and the element locator within the component both specified using xpath, or css, you can essentially just concatenate them to get a new single, non-nested locator.  But if one is specified with xpath and the other css, or link text, etc... not so straight-forward.

Oh, and you can see in the `loader` code: when a locator type is not specified, we assume css.
